%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.17
%%CreationDate: Tue Jun 13 17:16:36 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAACUAGCUACGUGGAGGCAUCCCUUCACGGCCGGCUUCUUAGAGGGACUAUGGCCGUUUAGGCCAAGGAAGUUUGAGGCAAUAACAGG\
) } def
/len { sequence length } bind def

/coor [
[118.96803284 137.93600464]
[113.46521759 151.89018250]
[107.96240234 165.84436035]
[110.91405487 181.97569275]
[98.24618530 192.38995361]
[82.99040985 186.37387085]
[80.84056854 170.11624146]
[94.00822449 160.34155273]
[99.51103973 146.38737488]
[105.01385498 132.43319702]
[100.68875122 126.30591583]
[92.03854370 114.05136871]
[87.71344757 107.92409515]
[72.72219086 108.43621063]
[57.73093414 108.94832611]
[42.73967743 109.46044922]
[27.74842262 109.97256470]
[12.75716782 110.48468018]
[-2.23408723 110.99679565]
[-17.22534180 111.50891113]
[-30.84523964 120.64293671]
[-45.44422150 113.17288208]
[-46.00410843 96.78329468]
[-31.94893265 88.33438110]
[-17.73745918 96.51765442]
[-2.74620390 96.00553894]
[12.24505138 95.49342346]
[27.23630714 94.98130798]
[42.22756195 94.46919250]
[57.21881866 93.95707703]
[72.21007538 93.44495392]
[87.20132446 92.93283844]
[100.95949554 86.95682526]
[111.56610107 76.35021973]
[122.17269897 65.74362183]
[132.22233582 54.60787964]
[141.68865967 42.97220993]
[151.15498352 31.33654213]
[160.62129211 19.70087242]
[170.08761597 8.06520271]
[179.55393982 -3.57046628]
[189.02026367 -15.20613575]
[198.48657227 -26.84180450]
[183.59249878 -25.06234550]
[169.71759033 -30.76207542]
[160.37541199 -42.49764633]
[157.93167114 -57.29724503]
[163.00523376 -71.41316223]
[174.31127930 -81.27080536]
[188.98680115 -84.37391663]
[203.31547546 -79.93669128]
[213.66885376 -69.08277893]
[217.42514038 -54.56071472]
[213.63418579 -40.04983139]
[226.45046997 -47.84358978]
[239.26676941 -55.63735199]
[252.08305359 -63.43111038]
[264.89935303 -71.22486877]
[270.07946777 -86.40860748]
[285.22839355 -91.68968201]
[298.72515869 -83.01690674]
[300.21618652 -67.04328918]
[288.55770874 -56.02242661]
[272.69311523 -58.40857697]
[259.87680054 -50.61481857]
[247.06051636 -42.82106018]
[234.24423218 -35.02730179]
[221.42794800 -27.23354149]
[210.12223816 -17.37548637]
[200.65592957 -5.73981619]
[191.18960571 5.89585304]
[181.72328186 17.53152275]
[172.25697327 29.16719246]
[162.79064941 40.80286026]
[153.32432556 52.43852997]
[143.85801697 64.07420349]
[143.95046997 67.80072021]
[142.10238647 71.74078369]
[138.24409485 74.91320038]
[132.77929688 76.35021973]
[122.17269897 86.95682526]
[111.56610107 97.56342316]
[125.95934296 93.34033203]
[140.78187561 91.03977203]
[155.11758423 95.45421600]
[166.07841492 105.69434357]
[171.45620728 119.69718170]
[170.16754150 134.64172363]
[162.47204590 147.51725769]
[149.92004395 155.72987366]
[135.04025269 157.62507629]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 10]
[2 9]
[3 8]
[13 32]
[14 31]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[33 82]
[34 81]
[35 80]
[36 76]
[37 75]
[38 74]
[39 73]
[40 72]
[41 71]
[42 70]
[43 69]
[54 68]
[55 67]
[56 66]
[57 65]
[58 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
